# Getting Started with {{ project_name }}

This guide will help you get up and running with the {{ project_name }} project.

## Prerequisites

Before you begin, make sure you have the following installed:

- {% if language.name == 'java' %}JDK {{ language.version }}{% elif language.name == 'kotlin' %}Kotlin {{ language.version }}{% endif %}
- {% if build_system.name == 'maven' %}Maven{% elif build_system.name == 'gradle' %}Gradle{% endif %}
- Git
{% if database.name %}
- {{ database.name|capitalize }}
{% endif %}
{% if 'docker' in features %}
- Docker and Docker Compose
{% endif %}

## Setting Up Your Development Environment

### 1. Clone the Repository

```bash
git clone <repository-url>
cd {{ project_name }}
```

### 2. Configure the Database

{% if database.name == 'mysql' %}
Create a MySQL database:

```sql
CREATE DATABASE {{ project_name|lower }};
CREATE USER '{{ project_name|lower }}_user'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON {{ project_name|lower }}.* TO '{{ project_name|lower }}_user'@'localhost';
FLUSH PRIVILEGES;
```
{% elif database.name == 'postgresql' %}
Create a PostgreSQL database:

```sql
CREATE DATABASE {{ project_name|lower }};
CREATE USER {{ project_name|lower }}_user WITH PASSWORD 'password';
GRANT ALL PRIVILEGES ON DATABASE {{ project_name|lower }} TO {{ project_name|lower }}_user;
```
{% elif database.name == 'h2' %}
The H2 database will be automatically created and configured.
{% endif %}

### 3. Configure the Application

{% if 'yaml-config' in features %}
Update the application configuration in `src/main/resources/application.yml`:

```yaml
# Database configuration
spring:
  datasource:
    url: jdbc:{% if database.name == 'mysql' %}mysql{% elif database.name == 'postgresql' %}postgresql{% elif database.name == 'h2' %}h2{% endif %}://localhost:{% if database.name == 'mysql' %}3306{% elif database.name == 'postgresql' %}5432{% elif database.name == 'h2' %}mem{% endif %}/{{ project_name|lower }}{% if database.name == 'h2' %};DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE{% endif %}
    username: {% if database.name == 'h2' %}sa{% else %}{{ project_name|lower }}_user{% endif %}
    password: {% if database.name == 'h2' %}{% else %}password{% endif %}
```
{% else %}
Update the application configuration in `src/main/resources/application.properties`:

```properties
# Database configuration
spring.datasource.url=jdbc:{% if database.name == 'mysql' %}mysql{% elif database.name == 'postgresql' %}postgresql{% elif database.name == 'h2' %}h2{% endif %}://localhost:{% if database.name == 'mysql' %}3306{% elif database.name == 'postgresql' %}5432{% elif database.name == 'h2' %}mem{% endif %}/{{ project_name|lower }}{% if database.name == 'h2' %};DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE{% endif %}
spring.datasource.username={% if database.name == 'h2' %}sa{% else %}{{ project_name|lower }}_user{% endif %}
spring.datasource.password={% if database.name == 'h2' %}{% else %}password{% endif %}
```
{% endif %}

### 4. Build the Application

{% if build_system.name == 'maven' %}
```bash
mvn clean install
```
{% elif build_system.name == 'gradle' %}
```bash
./gradlew clean build
```
{% endif %}

### 5. Run the Application

{% if build_system.name == 'maven' %}
```bash
mvn spring-boot:run
```
{% elif build_system.name == 'gradle' %}
```bash
./gradlew bootRun
```
{% endif %}

{% if 'docker' in features %}
### 6. Using Docker

The application can also be run using Docker:

```bash
docker-compose up -d
```
{% endif %}

## Testing the Application

{% if build_system.name == 'maven' %}
```bash
mvn test
```
{% elif build_system.name == 'gradle' %}
```bash
./gradlew test
```
{% endif %}

{% if 'swagger' in features %}
## API Documentation

The API documentation is available at:

- http://localhost:8080{% if framework.name == 'spring-boot' %}/swagger-ui.html{% elif framework.name == 'micronaut' %}/swagger/views/swagger-ui{% endif %}
{% endif %}

## Project Structure

- `src/main/java/{{ base_package|replace(".", "/") }}` - Contains the application code
  - `controller/` - REST controllers
  - `service/` - Service implementations
  - `repository/` - Data repositories
  - `model/` - Entity classes
  - `dto/` - Data Transfer Objects
  - `config/` - Configuration classes
  - `exception/` - Exception handlers
- `src/main/resources/` - Configuration files and resources
- `src/test/` - Test cases

## Additional Information

For more information, please refer to the following resources:

- [{{ framework.name }} Documentation]({% if framework.name == 'spring-boot' %}https://spring.io/projects/spring-boot{% elif framework.name == 'micronaut' %}https://micronaut.io/documentation.html{% endif %})
- [{{ build_system.name|capitalize }} Documentation]({% if build_system.name == 'maven' %}https://maven.apache.org/guides/{% elif build_system.name == 'gradle' %}https://docs.gradle.org/{% endif %})
