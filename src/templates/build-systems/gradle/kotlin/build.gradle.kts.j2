plugins {
    id("org.springframework.boot") version "{{ framework.version }}"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id("org.jetbrains.kotlin.jvm") version "{{ language.version }}"
    id("org.jetbrains.kotlin.plugin.spring") version "{{ language.version }}"
    id("org.jetbrains.kotlin.plugin.jpa") version "{{ language.version }}"
    id("org.jetbrains.kotlin.kapt") version "{{ language.version }}"
    id("jacoco")
    {% if features is defined and 'docker' in features %}
    id("com.palantir.docker") version "0.25.0"
    {% endif %}
}

group = "{{ base_package }}"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_{{ language.version }}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    
    {% if features is defined and 'validation' in features %}
    implementation("org.springframework.boot:spring-boot-starter-validation")
    {% endif %}
    {% if features is defined and 'security' in features %}
    implementation("org.springframework.boot:spring-boot-starter-security")
    {% endif %}
    {% if features is defined and 'actuator' in features %}
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    {% endif %}
    {% if features is defined and 'swagger' in features %}
    implementation("org.springdoc:springdoc-openapi-ui:1.6.9")
    implementation("org.springdoc:springdoc-openapi-kotlin:1.6.9")
    {% endif %}

    {% if database.name == 'mysql' %}
    runtimeOnly("mysql:mysql-connector-java")
    {% elif database.name == 'postgresql' %}
    runtimeOnly("org.postgresql:postgresql")
    {% elif database.name == 'h2' %}
    runtimeOnly("com.h2database:h2")
    {% elif database.name == 'mongodb' %}
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    {% endif %}
    
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(group = "org.junit.vintage", module = "junit-vintage-engine")
    }
    testImplementation("org.mockito.kotlin:mockito-kotlin:4.0.0")
    {% if features is defined and 'security' in features %}
    testImplementation("org.springframework.security:spring-security-test")
    {% endif %}
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xjsr305=strict")
        jvmTarget = "{{ language.version }}"
    }
}

tasks.withType<Test> {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(file("${buildDir}/jacocoHtml"))
    }
}

{% if features is defined and 'docker' in features %}
docker {
    name = "{{ project_name | lower }}:${project.version}"
    dockerfile = file("Dockerfile")
    files(tasks.bootJar.get().archiveFile)
    buildArgs(mapOf(
        "JAR_FILE" to tasks.bootJar.get().archiveFileName.get()
    ))
}
{% endif %}
