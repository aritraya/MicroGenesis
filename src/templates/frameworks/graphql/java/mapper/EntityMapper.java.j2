package {{ base_package }}.mapper;

import {{ base_package }}.dto.SampleEntityDto;
import {{ base_package }}.entity.SampleEntity;
{% if framework == 'spring-boot' %}
import org.springframework.stereotype.Component;
{% else %}
import jakarta.inject.Singleton;
{% endif %}

/**
 * Mapper for converting between SampleEntity and SampleEntityDto.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
{% if framework == 'spring-boot' %}
@Component
{% else %}
@Singleton
{% endif %}
public class SampleEntityMapper {
    
    /**
     * Convert entity to DTO.
     *
     * @param entity the entity to convert
     * @return the DTO
     */
    public SampleEntityDto toDto(SampleEntity entity) {
        if (entity == null) {
            return null;
        }
        
        return new SampleEntityDto(
            entity.getId(),
            entity.getName(),
            entity.getDescription(),
            entity.getCreatedAt(),
            entity.getUpdatedAt()
        );
    }
    
    /**
     * Convert DTO to entity.
     *
     * @param dto the DTO to convert
     * @return the entity
     */
    public SampleEntity toEntity(SampleEntityDto dto) {
        if (dto == null) {
            return null;
        }
        
        SampleEntity entity = new SampleEntity();
        entity.setId(dto.getId());
        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        entity.setCreatedAt(dto.getCreatedAt());
        entity.setUpdatedAt(dto.getUpdatedAt());
        
        return entity;
    }
    
    /**
     * Update entity from DTO.
     *
     * @param entity the entity to update
     * @param dto the DTO with updated values
     * @return the updated entity
     */
    public SampleEntity updateEntityFromDto(SampleEntity entity, SampleEntityDto dto) {
        if (entity == null || dto == null) {
            return entity;
        }
        
        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        
        return entity;
    }
}
