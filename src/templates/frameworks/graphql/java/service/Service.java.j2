package {{ base_package }}.service;

import {{ base_package }}.entity.SampleEntity;
import {{ base_package }}.repository.SampleEntityRepository;
{% if has_domain_events is defined and has_domain_events %}
import {{ base_package }}.domain.event.DomainEvent;
import {{ base_package }}.domain.event.DomainEventPublisher;
import {{ base_package }}.domain.event.SampleEntityCreatedEvent;
import {{ base_package }}.domain.event.SampleEntityUpdatedEvent;
{% endif %}
{% if framework == 'spring-boot' %}
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
{% else %}
import jakarta.inject.Singleton;
{% endif %}
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Service for managing SampleEntity instances.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
{% if framework == 'spring-boot' %}
@Service
{% else %}
@Singleton
{% endif %}
public class SampleEntityService {
    
    private final SampleEntityRepository repository;
    
    public SampleEntityService(SampleEntityRepository repository) {
        this.repository = repository;
    }
    
    /**
     * Find all sample entities.
     * 
     * @return list of all entities
     */
    public List<SampleEntity> findAll() {
        return repository.findAll();
    }
    
    /**
     * Find a sample entity by ID.
     * 
     * @param id entity ID
     * @return optional containing the entity if found
     */
    public Optional<SampleEntity> findById(UUID id) {
        return repository.findById(id);
    }
    
    /**
     * Find sample entities by name (exact match).
     * 
     * @param name name to search for
     * @return list of matching entities
     */
    public List<SampleEntity> findByName(String name) {
        return repository.findByName(name);
    }
    
    /**
     * Create a new sample entity.
     * 
     * @param entity entity to create
     * @return created entity
     */
    {% if framework == 'spring-boot' %}
    @Transactional
    {% endif %}
    public SampleEntity create(SampleEntity entity) {
        entity.setCreatedAt(LocalDateTime.now());
        entity.setUpdatedAt(LocalDateTime.now());
        SampleEntity savedEntity = repository.save(entity);
        
        {% if has_domain_events is defined and has_domain_events %}
        // Publish domain event
        DomainEventPublisher.publish(new SampleEntityCreatedEvent(savedEntity));
        {% endif %}
        
        return savedEntity;
    }
    
    /**
     * Update an existing sample entity.
     * 
     * @param id entity ID
     * @param entity updated entity data
     * @return updated entity, or empty optional if not found
     */
    {% if framework == 'spring-boot' %}
    @Transactional
    {% endif %}
    public Optional<SampleEntity> update(UUID id, SampleEntity entity) {
        return repository.findById(id).map(existingEntity -> {
            existingEntity.setName(entity.getName());
            existingEntity.setDescription(entity.getDescription());
            existingEntity.setUpdatedAt(LocalDateTime.now());
            
            SampleEntity updatedEntity = repository.save(existingEntity);
            
            {% if has_domain_events is defined and has_domain_events %}
            // Publish domain event
            DomainEventPublisher.publish(new SampleEntityUpdatedEvent(updatedEntity));
            {% endif %}
            
            return updatedEntity;
        });
    }
    
    /**
     * Delete a sample entity by ID.
     * 
     * @param id entity ID
     * @return true if deleted, false if not found
     */
    {% if framework == 'spring-boot' %}
    @Transactional
    {% endif %}
    public boolean deleteById(UUID id) {
        return repository.findById(id).map(entity -> {
            repository.delete(entity);
            return true;
        }).orElse(false);
    }
}
