package {{ base_package }}.resolver;

import {{ base_package }}.entity.SampleEntity;
import {{ base_package }}.service.SampleEntityService;
{% if dto_pattern is defined and dto_pattern %}
import {{ base_package }}.dto.SampleEntityDto;
import {{ base_package }}.mapper.SampleEntityMapper;
{% endif %}
{% if framework == 'spring-boot' %}
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.MutationMapping;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;
{% else %}
import io.micronaut.http.annotation.Controller;
import graphql.GraphQL;
import graphql.schema.DataFetcher;
import jakarta.inject.Singleton;
{% endif %}
import java.util.List;
import java.util.Optional;
import java.util.UUID;
{% if dto_pattern is defined and dto_pattern %}
import java.util.stream.Collectors;
{% endif %}

/**
 * GraphQL resolver for SampleEntity operations.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
{% if framework == 'spring-boot' %}
@Controller
{% else %}
@Singleton
{% endif %}
public class SampleEntityResolver {

    private final SampleEntityService service;
    
    {% if dto_pattern is defined and dto_pattern %}
    private final SampleEntityMapper mapper;
    
    public SampleEntityResolver(SampleEntityService service, SampleEntityMapper mapper) {
        this.service = service;
        this.mapper = mapper;
    }
    {% else %}
    public SampleEntityResolver(SampleEntityService service) {
        this.service = service;
    }
    {% endif %}

    /**
     * Get all sample entities.
     *
     * @return list of all entities
     */
    {% if framework == 'spring-boot' %}
    @QueryMapping("sampleEntities")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    public List<SampleEntityDto> findAll() {
        List<SampleEntity> entities = service.findAll();
        return entities.stream()
                .map(mapper::toDto)
                .collect(Collectors.toList());
    }
    {% else %}
    public List<SampleEntity> findAll() {
        return service.findAll();
    }
    {% endif %}

    /**
     * Get a sample entity by ID.
     *
     * @param id entity ID
     * @return the entity if found, or null
     */
    {% if framework == 'spring-boot' %}
    @QueryMapping("sampleEntity")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    public SampleEntityDto findById(@Argument UUID id) {
        return service.findById(id)
                .map(mapper::toDto)
                .orElse(null);
    }
    {% else %}
    public SampleEntity findById(@Argument UUID id) {
        return service.findById(id).orElse(null);
    }
    {% endif %}

    /**
     * Create a new sample entity.
     *
     * @param input entity data to create
     * @return the created entity
     */
    {% if framework == 'spring-boot' %}
    @MutationMapping("createSampleEntity")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    public SampleEntityDto create(@Argument SampleEntityInput input) {
        SampleEntity entity = new SampleEntity();
        entity.setName(input.getName());
        entity.setDescription(input.getDescription());
        
        SampleEntity createdEntity = service.create(entity);
        return mapper.toDto(createdEntity);
    }
    {% else %}
    public SampleEntity create(@Argument SampleEntityInput input) {
        SampleEntity entity = new SampleEntity();
        entity.setName(input.getName());
        entity.setDescription(input.getDescription());
        
        return service.create(entity);
    }
    {% endif %}

    /**
     * Update an existing sample entity.
     *
     * @param id entity ID
     * @param input updated entity data
     * @return the updated entity if found, or null
     */
    {% if framework == 'spring-boot' %}
    @MutationMapping("updateSampleEntity")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    public SampleEntityDto update(@Argument UUID id, @Argument SampleEntityInput input) {
        SampleEntity entity = new SampleEntity();
        entity.setName(input.getName());
        entity.setDescription(input.getDescription());
        
        return service.update(id, entity)
                .map(mapper::toDto)
                .orElse(null);
    }
    {% else %}
    public SampleEntity update(@Argument UUID id, @Argument SampleEntityInput input) {
        SampleEntity entity = new SampleEntity();
        entity.setName(input.getName());
        entity.setDescription(input.getDescription());
        
        return service.update(id, entity).orElse(null);
    }
    {% endif %}

    /**
     * Delete a sample entity.
     *
     * @param id entity ID
     * @return true if deleted, false if not found
     */
    {% if framework == 'spring-boot' %}
    @MutationMapping("deleteSampleEntity")
    {% endif %}
    public boolean delete(@Argument UUID id) {
        return service.deleteById(id);
    }

    /**
     * Input type for sample entity mutations.
     */
    public static class SampleEntityInput {
        private String name;
        private String description;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }
    }
}
