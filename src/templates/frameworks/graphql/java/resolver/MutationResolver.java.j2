package {{ package }};

import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

import {{ model_package }}.*;
import {{ repository_package }}.*;

/**
 * GraphQL Mutation Resolvers.
 * Generated by MicroGenesis
 */
@Component
public class MutationResolver {

    {% for entity in entities %}
    @Autowired
    private {{ entity.name }}Repository {{ entity.name|lower }}Repository;
    {% endfor %}
    
    public Map<String, DataFetcher> getMutationResolvers() {
        Map<String, DataFetcher> dataFetcherMap = new HashMap<>();
        
        {% for entity in entities %}
        // {{ entity.name }} resolvers
        dataFetcherMap.put("create{{ entity.name }}", this::create{{ entity.name }});
        dataFetcherMap.put("update{{ entity.name }}", this::update{{ entity.name }});
        dataFetcherMap.put("delete{{ entity.name }}", this::delete{{ entity.name }});
        {% endfor %}
        
        return dataFetcherMap;
    }
    
    {% for entity in entities %}
    private {{ entity.name }} create{{ entity.name }}(DataFetchingEnvironment environment) {
        Map<String, Object> input = environment.getArgument("input");
        {{ entity.name }} {{ entity.name|lower }} = new {{ entity.name }}();
        
        // Set properties from input
        // For a real implementation, use a mapper library or manually map fields
        mapInputToEntity(input, {{ entity.name|lower }});
        
        return {{ entity.name|lower }}Repository.save({{ entity.name|lower }});
    }
    
    private {{ entity.name }} update{{ entity.name }}(DataFetchingEnvironment environment) {
        String id = environment.getArgument("id");
        Map<String, Object> input = environment.getArgument("input");
        
        {{ entity.name }} {{ entity.name|lower }} = {{ entity.name|lower }}Repository.findById(id)
            .orElseThrow(() -> new RuntimeException("{{ entity.name }} not found with id: " + id));
        
        // Update properties from input
        mapInputToEntity(input, {{ entity.name|lower }});
        
        return {{ entity.name|lower }}Repository.save({{ entity.name|lower }});
    }
    
    private boolean delete{{ entity.name }}(DataFetchingEnvironment environment) {
        String id = environment.getArgument("id");
        
        if (!{{ entity.name|lower }}Repository.existsById(id)) {
            return false;
        }
        
        {{ entity.name|lower }}Repository.deleteById(id);
        return true;
    }
    
    private void mapInputToEntity(Map<String, Object> input, {{ entity.name }} entity) {
        // This is a simplified mapping. In a real application, use a proper mapping framework.
        {% for field in entity.fields %}
        {% if field.name != "id" %}
        if (input.containsKey("{{ field.name }}")) {
            entity.set{{ field.name|capitalize }}(({{ field.type }}) input.get("{{ field.name }}"));
        }
        {% endif %}
        {% endfor %}
    }
    {% endfor %}
}
