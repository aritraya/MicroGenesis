package {{ package }};

import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import {{ model_package }}.*;
import {{ repository_package }}.*;

/**
 * GraphQL Query Resolvers.
 * Generated by MicroGenesis
 */
@Component
public class QueryResolver {

    {% for entity in entities %}
    @Autowired
    private {{ entity.name }}Repository {{ entity.name|lower }}Repository;
    {% endfor %}
    
    public Map<String, DataFetcher> getQueryResolvers() {
        Map<String, DataFetcher> dataFetcherMap = new HashMap<>();
        
        {% for entity in entities %}
        // {{ entity.name }} resolvers
        dataFetcherMap.put("{{ entity.name|lower }}", this::get{{ entity.name }}ById);
        dataFetcherMap.put("{{ entity.name|lower }}s", this::getAll{{ entity.name }}s);
        {% endfor %}
        
        return dataFetcherMap;
    }
    
    {% for entity in entities %}
    private {{ entity.name }} get{{ entity.name }}ById(DataFetchingEnvironment environment) {
        String id = environment.getArgument("id");
        return {{ entity.name|lower }}Repository.findById(id).orElse(null);
    }
    
    private List<{{ entity.name }}> getAll{{ entity.name }}s(DataFetchingEnvironment environment) {
        return {{ entity.name|lower }}Repository.findAll();
    }
    {% endfor %}
}
