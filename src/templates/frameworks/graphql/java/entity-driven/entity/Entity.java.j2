package {{ package_name }}.entity;

{% if database_type == "mongodb" %}
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.annotation.Id;
{% elif database_type == "postgres" or database_type == "mysql" %}
import javax.persistence.*;
{% if features is defined and features.audit %}
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
{% endif %}
{% elif database_type == "cassandra" %}
import org.springframework.data.cassandra.core.mapping.Table;
import org.springframework.data.cassandra.core.mapping.PrimaryKey;
{% endif %}
import java.util.Objects;
{% if id_type == "UUID" %}
import java.util.UUID;
{% endif %}
import java.time.LocalDateTime;

/**
 * Entity class representing {{ entity_name_human }}.
 */
{% if database_type == "mongodb" %}
@Document(collection = "{{ entity_name | lower }}s")
{% elif database_type == "postgres" or database_type == "mysql" %}
@Entity
@Table(name = "{{ entity_name | lower }}s")
{% if features is defined and features.audit %}
@EntityListeners(AuditingEntityListener.class)
{% endif %}
{% elif database_type == "cassandra" %}
@Table("{{ entity_name | lower }}s")
{% endif %}
public class {{ entity_name }} {

    {% if database_type == "mongodb" %}
    @Id
    private {{ id_type }} {{ id_field_name }};
    {% elif database_type == "postgres" or database_type == "mysql" %}
    @Id
    {% if id_generation_type == "auto" %}
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    {% elif id_generation_type == "uuid" %}
    @Column(name = "{{ id_field_name }}", updatable = false, nullable = false)
    {% endif %}
    private {{ id_type }} {{ id_field_name }};
    {% elif database_type == "cassandra" %}
    @PrimaryKey
    private {{ id_type }} {{ id_field_name }};
    {% endif %}

    {% for field in fields %}
    private {{ field.type }} {{ field.name }};
    {% endfor %}

    {% if features is defined and features.audit %}
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @CreatedBy
    @Column(name = "created_by", updatable = false)
    private String createdBy;

    @LastModifiedBy
    @Column(name = "updated_by")
    private String updatedBy;
    {% endif %}

    {% if features is defined and features.soft_delete %}
    @Column(name = "deleted")
    private boolean deleted = false;
    {% endif %}

    {% if features is defined and features.tenant_aware %}
    @Column(name = "tenant_id", nullable = false)
    private String tenantId;
    {% endif %}

    /**
     * Default constructor for JPA.
     */
    public {{ entity_name }}() {
        // Required by JPA
    }

    /**
     * Constructor with all required fields.
     */
    public {{ entity_name }}({% for field in fields %}{{ field.type }} {{ field.name }}{% if not loop.last %}, {% endif %}{% endfor %}{% if features is defined and features.tenant_aware %}{% if fields|length > 0 %}, {% endif %}String tenantId{% endif %}) {
        {% for field in fields %}
        this.{{ field.name }} = {{ field.name }};
        {% endfor %}
        {% if features is defined and features.tenant_aware %}
        this.tenantId = tenantId;
        {% endif %}
        {% if id_generation_type == "uuid" and id_type == "UUID" %}
        this.{{ id_field_name }} = UUID.randomUUID();
        {% endif %}
    }

    // Getters and Setters

    public {{ id_type }} get{{ id_field_name | capitalize }}() {
        return {{ id_field_name }};
    }

    public void set{{ id_field_name | capitalize }}({{ id_type }} {{ id_field_name }}) {
        this.{{ id_field_name }} = {{ id_field_name }};
    }

    {% for field in fields %}
    public {{ field.type }} get{{ field.name | capitalize }}() {
        return {{ field.name }};
    }

    public void set{{ field.name | capitalize }}({{ field.type }} {{ field.name }}) {
        this.{{ field.name }} = {{ field.name }};
    }
    {% endfor %}

    {% if features is defined and features.audit %}
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public String getCreatedBy() {
        return createdBy;
    }

    public String getUpdatedBy() {
        return updatedBy;
    }
    {% endif %}

    {% if features is defined and features.soft_delete %}
    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }
    {% endif %}

    {% if features is defined and features.tenant_aware %}
    public String getTenantId() {
        return tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }
    {% endif %}

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        {{ entity_name }} that = ({{ entity_name }}) o;
        return Objects.equals({{ id_field_name }}, that.{{ id_field_name }});
    }

    @Override
    public int hashCode() {
        return Objects.hash({{ id_field_name }});
    }

    @Override
    public String toString() {
        return "{{ entity_name }}{" +
                "{{ id_field_name }}=" + {{ id_field_name }} +
                {% for field in fields %}
                ", {{ field.name }}=" + {{ field.name }} +
                {% endfor %}
                {% if features is defined and features.audit %}
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                {% endif %}
                '}';
    }
}
