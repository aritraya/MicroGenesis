package {{ base_package }}.resolver

import {{ base_package }}.model.SampleEntity
import {{ base_package }}.service.SampleEntityService
import org.springframework.graphql.data.method.annotation.Argument
import org.springframework.graphql.data.method.annotation.MutationMapping
import org.springframework.graphql.data.method.annotation.QueryMapping
import org.springframework.stereotype.Controller
import java.util.UUID

/**
 * GraphQL resolver for SampleEntity operations.
 * 
 * This controller handles both queries and mutations for the SampleEntity type.
 */
@Controller
class SampleEntityResolver(
    private val service: SampleEntityService
) {
    /**
     * Query to get a sample entity by ID.
     */
    @QueryMapping
    fun getSampleEntity(@Argument id: String): SampleEntity? {
        return service.findById(UUID.fromString(id))
    }
    
    /**
     * Query to get all sample entities.
     */
    @QueryMapping
    fun getAllSampleEntities(): List<SampleEntity> {
        return service.findAll()
    }
    
    /**
     * Mutation to create a new sample entity.
     */
    @MutationMapping
    fun createSampleEntity(@Argument input: SampleEntityInput): SampleEntity {
        return service.create(
            name = input.name,
            description = input.description
        )
    }
    
    /**
     * Mutation to update an existing sample entity.
     */
    @MutationMapping
    fun updateSampleEntity(@Argument id: String, @Argument input: SampleEntityInput): SampleEntity? {
        return service.update(
            id = UUID.fromString(id),
            name = input.name,
            description = input.description
        )
    }
    
    /**
     * Mutation to delete a sample entity.
     */
    @MutationMapping
    fun deleteSampleEntity(@Argument id: String): Boolean {
        return service.delete(UUID.fromString(id))
    }
}

/**
 * Input class for sample entity operations.
 */
data class SampleEntityInput(
    val name: String,
    val description: String?
)
