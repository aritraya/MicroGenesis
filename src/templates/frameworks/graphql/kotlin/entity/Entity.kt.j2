package {{ base_package }}.entity

import java.time.LocalDateTime
import java.util.UUID
{% if database.name != "mongodb" %}
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.GeneratedValue
import jakarta.persistence.GenerationType
import jakarta.persistence.Column
import jakarta.persistence.Table
import jakarta.persistence.PrePersist
import jakarta.persistence.PreUpdate
{% else %}
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.mapping.Document
{% endif %}

/**
 * Sample entity for {{ project_name }}.
 *
 * Generated by MicroGenesis scaffolding tool.
 * This is a data entity that maps to a database.
 */
{% if database.name != "mongodb" %}
@Entity
@Table(name = "sample_entities")
{% else %}
@Document(collection = "sample_entities")
{% endif %}
data class SampleEntity(
    @Id
    {% if database.name != "mongodb" %}
    @GeneratedValue(strategy = GenerationType.AUTO)
    {% endif %}
    val id: UUID = UUID.randomUUID(),
    
    {% if database.name != "mongodb" %}
    @Column(nullable = false)
    {% endif %}
    var name: String,
    
    {% if database.name != "mongodb" %}
    @Column
    {% endif %}
    var description: String? = null,
    
    {% if database.name != "mongodb" %}
    @Column(nullable = false, updatable = false)
    {% endif %}
    var createdAt: LocalDateTime = LocalDateTime.now(),
    
    {% if database.name != "mongodb" %}
    @Column(nullable = false)
    {% endif %}
    var updatedAt: LocalDateTime = LocalDateTime.now()
) {
    {% if database.name != "mongodb" %}
    /**
     * Pre-persist hook to set timestamps.
     */
    @PrePersist
    fun prePersist() {
        val now = LocalDateTime.now()
        createdAt = now
        updatedAt = now
    }
    
    /**
     * Pre-update hook to update the updatedAt timestamp.
     */
    @PreUpdate
    fun preUpdate() {
        updatedAt = LocalDateTime.now()
    }
    {% endif %}
}
