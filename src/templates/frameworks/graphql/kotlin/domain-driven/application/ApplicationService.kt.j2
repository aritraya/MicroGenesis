package {{ base_package }}.application

import {{ base_package }}.domain.model.SampleEntity
import {{ base_package }}.domain.repository.SampleEntityRepository
{% if has_domain_events is defined and has_domain_events %}
import {{ base_package }}.domain.event.DomainEventPublisher
import {{ base_package }}.domain.event.SampleEntityCreatedEvent
import {{ base_package }}.domain.event.SampleEntityUpdatedEvent
{% endif %}
{% if framework == 'spring-boot' %}
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
{% else %}
import jakarta.inject.Singleton
import io.micronaut.transaction.annotation.ReadOnly
import io.micronaut.transaction.annotation.Transactional
{% endif %}
import java.util.Optional
import java.util.UUID

/**
 * Application service for SampleEntity operations in a domain-driven architecture.
 *
 * In a domain-driven architecture, application services orchestrate domain operations
 * and provide a use-case oriented API for the presentation layer. They use repositories
 * to retrieve and store domain objects.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
{% if framework == 'spring-boot' %}
@Service
{% else %}
@Singleton
{% endif %}
class SampleEntityService(private val repository: SampleEntityRepository) {
    
    /**
     * Find all sample entities.
     * 
     * @return list of all entities
     */
    {% if framework == 'spring-boot' %}
    @Transactional(readOnly = true)
    {% else %}
    @ReadOnly
    {% endif %}
    fun findAll(): List<SampleEntity> {
        return repository.findAll()
    }
    
    /**
     * Find a sample entity by ID.
     * 
     * @param id entity ID
     * @return optional containing the entity if found
     */
    {% if framework == 'spring-boot' %}
    @Transactional(readOnly = true)
    {% else %}
    @ReadOnly
    {% endif %}
    fun findById(id: UUID): Optional<SampleEntity> {
        return repository.findById(id)
    }
    
    /**
     * Create a new sample entity.
     * 
     * @param name entity name
     * @param description entity description
     * @return created entity
     */
    @Transactional
    fun create(name: String, description: String?): SampleEntity {
        // Use factory method to create a new domain entity
        val entity = SampleEntity.create(name, description)
        val savedEntity = repository.save(entity)
        
        {% if has_domain_events is defined and has_domain_events %}
        // Process and publish domain events
        val events = entity.getDomainEvents()
        events.forEach { event -> DomainEventPublisher.publish(event) }
        entity.clearDomainEvents()
        {% endif %}
        
        return savedEntity
    }
    
    /**
     * Update an existing sample entity.
     * 
     * @param id entity ID
     * @param name updated name
     * @param description updated description
     * @return updated entity, or empty optional if not found
     */
    @Transactional
    fun update(id: UUID, name: String, description: String?): Optional<SampleEntity> {
        return repository.findById(id).map { entity ->
            // Use domain entity methods to update state
            entity.updateDetails(name, description)
            
            val updatedEntity = repository.save(entity)
            
            {% if has_domain_events is defined and has_domain_events %}
            // Process and publish domain events
            val events = entity.getDomainEvents()
            events.forEach { event -> DomainEventPublisher.publish(event) }
            entity.clearDomainEvents()
            {% endif %}
            
            updatedEntity
        }
    }
    
    /**
     * Delete a sample entity by ID.
     * 
     * @param id entity ID
     * @return true if deleted, false if not found
     */
    @Transactional
    fun deleteById(id: UUID): Boolean {
        return repository.findById(id).map { entity ->
            repository.delete(entity)
            true
        }.orElse(false)
    }
}
