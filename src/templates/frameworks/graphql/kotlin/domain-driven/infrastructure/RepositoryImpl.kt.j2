package {{ base_package }}.infrastructure.repository

import {{ base_package }}.domain.model.SampleEntity
import {{ base_package }}.domain.repository.SampleEntityRepository
import org.springframework.stereotype.Repository
import java.util.Optional
import java.util.UUID
{% if database == 'jpa' %}
import org.springframework.data.jpa.repository.JpaRepository
import jakarta.persistence.EntityManager
import jakarta.persistence.PersistenceContext
{% elif database == 'mongodb' %}
import org.springframework.data.mongodb.repository.MongoRepository
import org.springframework.data.mongodb.core.MongoTemplate
import org.springframework.data.mongodb.core.query.Criteria
import org.springframework.data.mongodb.core.query.Query
{% endif %}

/**
 * Implementation of the SampleEntityRepository domain repository interface.
 *
 * This class bridges the domain model with the underlying database technology,
 * isolating the domain from persistence concerns. It adapts between
 * the domain repository interface and the Spring Data repository.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
@Repository
class SampleEntityRepositoryImpl(
    {% if database == 'jpa' %}
    @PersistenceContext private val entityManager: EntityManager,
    private val jpaRepository: SampleEntityJpaRepository
    {% elif database == 'mongodb' %}
    private val mongoTemplate: MongoTemplate,
    private val mongoRepository: SampleEntityMongoRepository
    {% else %}
    // Add your database-specific dependencies here
    {% endif %}
) : SampleEntityRepository {

    override fun findAll(): List<SampleEntity> {
        {% if database == 'jpa' %}
        return jpaRepository.findAll()
        {% elif database == 'mongodb' %}
        return mongoRepository.findAll()
        {% else %}
        // Implement using your database technology
        return listOf()
        {% endif %}
    }

    override fun findById(id: UUID): Optional<SampleEntity> {
        {% if database == 'jpa' %}
        return jpaRepository.findById(id)
        {% elif database == 'mongodb' %}
        return mongoRepository.findById(id)
        {% else %}
        // Implement using your database technology
        return Optional.empty()
        {% endif %}
    }

    override fun save(entity: SampleEntity): SampleEntity {
        {% if database == 'jpa' %}
        return jpaRepository.save(entity)
        {% elif database == 'mongodb' %}
        return mongoRepository.save(entity)
        {% else %}
        // Implement using your database technology
        return entity
        {% endif %}
    }

    override fun delete(entity: SampleEntity) {
        {% if database == 'jpa' %}
        jpaRepository.delete(entity)
        {% elif database == 'mongodb' %}
        mongoRepository.delete(entity)
        {% else %}
        // Implement using your database technology
        {% endif %}
    }
}

{% if database == 'jpa' %}
/**
 * Spring Data JPA repository interface for SampleEntity.
 */
interface SampleEntityJpaRepository : JpaRepository<SampleEntity, UUID>
{% elif database == 'mongodb' %}
/**
 * Spring Data MongoDB repository interface for SampleEntity.
 */
interface SampleEntityMongoRepository : MongoRepository<SampleEntity, UUID>
{% endif %}
