package {{ base_package }}.config

{% if framework == 'spring-boot' %}
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.graphql.execution.RuntimeWiringConfigurer
import graphql.scalars.ExtendedScalars
{% else %}
import io.micronaut.context.annotation.Factory
import jakarta.inject.Singleton
import graphql.GraphQL
import graphql.schema.GraphQLSchema
import graphql.schema.idl.RuntimeWiring
import graphql.schema.idl.SchemaGenerator
import graphql.schema.idl.SchemaParser
import graphql.schema.idl.TypeDefinitionRegistry
import graphql.scalars.ExtendedScalars
import java.io.BufferedReader
import java.io.InputStreamReader
{% endif %}

/**
 * GraphQL configuration class.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
{% if framework == 'spring-boot' %}
@Configuration
class GraphQLConfig {

    /**
     * Configure GraphQL runtime wiring.
     * 
     * @return the RuntimeWiringConfigurer
     */
    @Bean
    fun runtimeWiringConfigurer(): RuntimeWiringConfigurer {
        return RuntimeWiringConfigurer { wiringBuilder ->
            wiringBuilder
                .scalar(ExtendedScalars.DateTime)
                .scalar(ExtendedScalars.Object)
        }
    }
}
{% else %}
@Factory
class GraphQLConfig {

    /**
     * Configures the GraphQL instance.
     * 
     * @return the GraphQL instance
     */
    @Singleton
    fun graphQL(): GraphQL {
        // Parse schema
        val schemaInputStream = javaClass.getResourceAsStream("/schema.graphqls")
        val schemaString = BufferedReader(InputStreamReader(schemaInputStream))
            .lines().reduce("", String::concat)
        val typeRegistry = SchemaParser().parse(schemaString)
        
        // Configure runtime wiring
        val runtimeWiring = RuntimeWiring.newRuntimeWiring()
            .scalar(ExtendedScalars.DateTime)
            .scalar(ExtendedScalars.Object)
            .build()
        
        // Create schema
        val graphQLSchema = SchemaGenerator()
            .makeExecutableSchema(typeRegistry, runtimeWiring)
        
        return GraphQL.newGraphQL(graphQLSchema).build()
    }
}
{% endif %}
