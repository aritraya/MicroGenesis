package {{ base_package }}.resolver

import {{ base_package }}.entity.SampleEntity
import {{ base_package }}.service.SampleEntityService
{% if dto_pattern is defined and dto_pattern %}
import {{ base_package }}.dto.SampleEntityDto
import {{ base_package }}.mapper.SampleEntityMapper
{% endif %}
{% if framework == 'spring-boot' %}
import org.springframework.graphql.data.method.annotation.Argument
import org.springframework.graphql.data.method.annotation.MutationMapping
import org.springframework.graphql.data.method.annotation.QueryMapping
import org.springframework.stereotype.Controller
{% else %}
import io.micronaut.http.annotation.Controller
import graphql.GraphQL
import graphql.schema.DataFetcher
import jakarta.inject.Singleton
{% endif %}
import java.util.UUID

/**
 * GraphQL resolver for SampleEntity operations.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
{% if framework == 'spring-boot' %}
@Controller
{% else %}
@Singleton
{% endif %}
class SampleEntityResolver(
    private val service: SampleEntityService{% if dto_pattern is defined and dto_pattern %},
    private val mapper: SampleEntityMapper{% endif %}
) {

    /**
     * Get all sample entities.
     *
     * @return list of all entities
     */
    {% if framework == 'spring-boot' %}
    @QueryMapping("sampleEntities")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    fun findAll(): List<SampleEntityDto> {
        val entities = service.findAll()
        return entities.map { mapper.toDto(it) }
    }
    {% else %}
    fun findAll(): List<SampleEntity> {
        return service.findAll()
    }
    {% endif %}

    /**
     * Get a sample entity by ID.
     *
     * @param id entity ID
     * @return the entity if found, or null
     */
    {% if framework == 'spring-boot' %}
    @QueryMapping("sampleEntity")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    fun findById(@Argument id: UUID): SampleEntityDto? {
        return service.findById(id)
            .map { mapper.toDto(it) }
            .orElse(null)
    }
    {% else %}
    fun findById(@Argument id: UUID): SampleEntity? {
        return service.findById(id).orElse(null)
    }
    {% endif %}

    /**
     * Create a new sample entity.
     *
     * @param input entity data to create
     * @return the created entity
     */
    {% if framework == 'spring-boot' %}
    @MutationMapping("createSampleEntity")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    fun create(@Argument input: SampleEntityInput): SampleEntityDto {
        val entity = SampleEntity(
            name = input.name,
            description = input.description
        )
        
        val createdEntity = service.create(entity)
        return mapper.toDto(createdEntity)
    }
    {% else %}
    fun create(@Argument input: SampleEntityInput): SampleEntity {
        val entity = SampleEntity(
            name = input.name,
            description = input.description
        )
        
        return service.create(entity)
    }
    {% endif %}

    /**
     * Update an existing sample entity.
     *
     * @param id entity ID
     * @param input updated entity data
     * @return the updated entity if found, or null
     */
    {% if framework == 'spring-boot' %}
    @MutationMapping("updateSampleEntity")
    {% endif %}
    {% if dto_pattern is defined and dto_pattern %}
    fun update(@Argument id: UUID, @Argument input: SampleEntityInput): SampleEntityDto? {
        val entity = SampleEntity(
            name = input.name,
            description = input.description
        )
        
        return service.update(id, entity)
            .map { mapper.toDto(it) }
            .orElse(null)
    }
    {% else %}
    fun update(@Argument id: UUID, @Argument input: SampleEntityInput): SampleEntity? {
        val entity = SampleEntity(
            name = input.name,
            description = input.description
        )
        
        return service.update(id, entity).orElse(null)
    }
    {% endif %}

    /**
     * Delete a sample entity.
     *
     * @param id entity ID
     * @return true if deleted, false if not found
     */
    {% if framework == 'spring-boot' %}
    @MutationMapping("deleteSampleEntity")
    {% endif %}
    fun delete(@Argument id: UUID): Boolean {
        return service.deleteById(id)
    }

    /**
     * Input type for sample entity mutations.
     */
    data class SampleEntityInput(
        val name: String,
        val description: String
    )
}
