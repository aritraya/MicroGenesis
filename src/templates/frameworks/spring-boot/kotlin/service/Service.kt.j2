package {{ base_package }}.service

import {{ base_package }}.entity.SampleEntity
import {{ base_package }}.repository.SampleEntityRepository
{% if has_domain_events is defined and has_domain_events %}
import {{ base_package }}.domain.event.DomainEvent
import {{ base_package }}.domain.event.DomainEventPublisher
import {{ base_package }}.domain.event.SampleEntityCreatedEvent
import {{ base_package }}.domain.event.SampleEntityUpdatedEvent
{% endif %}
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import java.time.LocalDateTime
import java.util.Optional
import java.util.UUID

/**
 * Service for managing SampleEntity instances.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
@Service
class SampleEntityService(private val repository: SampleEntityRepository) {
    
    /**
     * Find all sample entities.
     * 
     * @return list of all entities
     */
    fun findAll(): List<SampleEntity> {
        return repository.findAll()
    }
    
    /**
     * Find a sample entity by ID.
     * 
     * @param id entity ID
     * @return optional containing the entity if found
     */
    fun findById(id: UUID): Optional<SampleEntity> {
        return repository.findById(id)
    }
    
    /**
     * Find sample entities by name (exact match).
     * 
     * @param name name to search for
     * @return list of matching entities
     */
    fun findByName(name: String): List<SampleEntity> {
        return repository.findByName(name)
    }
    
    /**
     * Search for sample entities by partial name (case-insensitive).
     * 
     * @param namePart part of name to search for
     * @return list of matching entities
     */
    fun searchByName(namePart: String): List<SampleEntity> {
        return repository.findByNameContainingIgnoreCase(namePart)
    }
    
    /**
     * Create a new sample entity.
     * 
     * @param name entity name
     * @param description entity description
     * @return created entity
     */
    @Transactional
    fun create(name: String, description: String?): SampleEntity {
        val now = LocalDateTime.now()
        
        val entity = SampleEntity(
            name = name,
            description = description,
            createdAt = now,
            updatedAt = now
        )
        
        val savedEntity = repository.save(entity)
        
        {% if has_domain_events is defined and has_domain_events %}
        // Publish domain event
        DomainEventPublisher.publish(SampleEntityCreatedEvent(savedEntity.id, savedEntity.name))
        {% endif %}
        
        return savedEntity
    }
    
    /**
     * Update an existing sample entity.
     * 
     * @param id entity ID
     * @param name updated name
     * @param description updated description
     * @return updated entity if found, empty optional otherwise
     */
    @Transactional
    fun update(id: UUID, name: String, description: String?): Optional<SampleEntity> {
        return repository.findById(id)
            .map { entity ->
                entity.name = name
                entity.description = description
                entity.updatedAt = LocalDateTime.now()
                
                val updatedEntity = repository.save(entity)
                
                {% if has_domain_events is defined and has_domain_events %}
                // Publish domain event
                DomainEventPublisher.publish(SampleEntityUpdatedEvent(updatedEntity.id, updatedEntity.name))
                {% endif %}
                
                updatedEntity
            }
    }
    
    /**
     * Delete a sample entity by ID.
     * 
     * @param id entity ID
     * @return true if entity was deleted, false if not found
     */
    @Transactional
    fun delete(id: UUID): Boolean {
        return if (repository.existsById(id)) {
            repository.deleteById(id)
            true
        } else {
            false
        }
    }
}
