package {{ base_package }}.controller

import {{ base_package }}.entity.SampleEntity
import {{ base_package }}.service.SampleEntityService
{% if dto_pattern is defined and dto_pattern %}
import {{ base_package }}.dto.SampleEntityDto
import {{ base_package }}.mapper.SampleEntityMapper
{% endif %}
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import java.util.UUID

/**
 * REST controller for SampleEntity operations.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
@RestController
@RequestMapping("/api/sample-entities")
class SampleEntityController(
    private val service: SampleEntityService{% if dto_pattern is defined and dto_pattern %},
    private val mapper: SampleEntityMapper{% endif %}
) {

    /**
     * Get all sample entities.
     *
     * @return list of all entities
     */
    @GetMapping
    {% if dto_pattern is defined and dto_pattern %}
    fun findAll(): ResponseEntity<List<SampleEntityDto>> {
        val entities = service.findAll()
        val dtos = entities.map { mapper.toDto(it) }
        return ResponseEntity.ok(dtos)
    }
    {% else %}
    fun findAll(): ResponseEntity<List<SampleEntity>> {
        return ResponseEntity.ok(service.findAll())
    }
    {% endif %}

    /**
     * Get a sample entity by ID.
     *
     * @param id entity ID
     * @return the entity if found, or 404 Not Found
     */
    @GetMapping("/{id}")
    {% if dto_pattern is defined and dto_pattern %}
    fun findById(@PathVariable id: UUID): ResponseEntity<SampleEntityDto> {
        return service.findById(id)
            .map { mapper.toDto(it) }
            .map { ResponseEntity.ok(it) }
            .orElse(ResponseEntity.notFound().build())
    }
    {% else %}
    fun findById(@PathVariable id: UUID): ResponseEntity<SampleEntity> {
        return service.findById(id)
            .map { ResponseEntity.ok(it) }
            .orElse(ResponseEntity.notFound().build())
    }
    {% endif %}

    /**
     * Create a new sample entity.
     *
     * @param entityData entity data to create
     * @return the created entity
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    {% if dto_pattern is defined and dto_pattern %}
    fun create(@RequestBody entityData: SampleEntityDto): ResponseEntity<SampleEntityDto> {
        val entity = mapper.toEntity(entityData)
        val createdEntity = service.create(entity)
        return ResponseEntity
            .status(HttpStatus.CREATED)
            .body(mapper.toDto(createdEntity))
    }
    {% else %}
    fun create(@RequestBody entity: SampleEntity): ResponseEntity<SampleEntity> {
        val createdEntity = service.create(entity)
        return ResponseEntity
            .status(HttpStatus.CREATED)
            .body(createdEntity)
    }
    {% endif %}

    /**
     * Update an existing sample entity.
     *
     * @param id entity ID
     * @param entityData updated entity data
     * @return the updated entity if found, or 404 Not Found
     */
    @PutMapping("/{id}")
    {% if dto_pattern is defined and dto_pattern %}
    fun update(@PathVariable id: UUID, @RequestBody entityData: SampleEntityDto): ResponseEntity<SampleEntityDto> {
        val entity = mapper.toEntity(entityData)
        return service.update(id, entity)
            .map { mapper.toDto(it) }
            .map { ResponseEntity.ok(it) }
            .orElse(ResponseEntity.notFound().build())
    }
    {% else %}
    fun update(@PathVariable id: UUID, @RequestBody entity: SampleEntity): ResponseEntity<SampleEntity> {
        return service.update(id, entity)
            .map { ResponseEntity.ok(it) }
            .orElse(ResponseEntity.notFound().build())
    }
    {% endif %}

    /**
     * Delete a sample entity.
     *
     * @param id entity ID
     * @return 204 No Content if deleted, or 404 Not Found
     */
    @DeleteMapping("/{id}")
    fun delete(@PathVariable id: UUID): ResponseEntity<Void> {
        val deleted = service.deleteById(id)
        
        return if (deleted) {
            ResponseEntity.noContent().build()
        } else {
            ResponseEntity.notFound().build()
        }
    }
}
