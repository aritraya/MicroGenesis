package {{ base_package }}.domain.model

import {{ base_package }}.domain.event.DomainEvent
import java.util.Collections

/**
 * Base class for aggregate roots in domain-driven design.
 *
 * An aggregate root is an entity that encapsulates and controls access to a cluster
 * of related objects (the aggregate). External objects may only reference the aggregate root.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
abstract class AggregateRoot<ID> {
    
    private val domainEvents = mutableListOf<DomainEvent>()
    
    /**
     * Gets the ID of this aggregate root.
     * 
     * @return the ID
     */
    abstract fun getId(): ID
    
    /**
     * Registers a domain event to be dispatched when the aggregate is saved.
     * 
     * @param event the domain event
     */
    protected fun registerEvent(event: DomainEvent) {
        domainEvents.add(event)
    }
    
    /**
     * Gets all domain events registered by this aggregate.
     * 
     * @return unmodifiable list of domain events
     */
    fun getDomainEvents(): List<DomainEvent> {
        return Collections.unmodifiableList(domainEvents)
    }
    
    /**
     * Clears all registered domain events.
     */
    fun clearDomainEvents() {
        domainEvents.clear()
    }
}
