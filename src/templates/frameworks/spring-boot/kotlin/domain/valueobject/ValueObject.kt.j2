package {{ base_package }}.domain.valueobject

/**
 * Value object representing {{ value_object_name|default('Money') }}.
 *
 * Value objects are immutable and represent concepts with no identity in the domain.
 * They are identified by their attributes rather than an identity field.
 *
 * Generated by MicroGenesis scaffolding tool.
 * Architecture: Domain-Driven Design
 */
data class {{ value_object_name|default('Money') }}(
    val amount: Double,
    val currency: String
) {
    init {
        require(amount >= 0) { "Amount must be non-negative" }
        require(currency.isNotBlank()) { "Currency must not be blank" }
    }
    
    /**
     * Add another money value of the same currency.
     *
     * @param other the money to add
     * @return a new Money instance with the sum
     * @throws IllegalArgumentException if the currencies don't match
     */
    fun add(other: {{ value_object_name|default('Money') }}): {{ value_object_name|default('Money') }} {
        require(currency == other.currency) { "Cannot add money with different currencies" }
        return {{ value_object_name|default('Money') }}(amount + other.amount, currency)
    }
    
    /**
     * Subtract another money value of the same currency.
     *
     * @param other the money to subtract
     * @return a new Money instance with the difference
     * @throws IllegalArgumentException if the currencies don't match or result would be negative
     */
    fun subtract(other: {{ value_object_name|default('Money') }}): {{ value_object_name|default('Money') }} {
        require(currency == other.currency) { "Cannot subtract money with different currencies" }
        val newAmount = amount - other.amount
        require(newAmount >= 0) { "Result of subtraction would be negative" }
        return {{ value_object_name|default('Money') }}(newAmount, currency)
    }
    
    /**
     * Multiply the money amount by a factor.
     *
     * @param factor the multiplication factor
     * @return a new Money instance with the multiplied amount
     * @throws IllegalArgumentException if the factor is negative
     */
    fun multiply(factor: Double): {{ value_object_name|default('Money') }} {
        require(factor >= 0) { "Factor must be non-negative" }
        return {{ value_object_name|default('Money') }}(amount * factor, currency)
    }
    
    override fun toString(): String {
        return "$amount $currency"
    }
}
