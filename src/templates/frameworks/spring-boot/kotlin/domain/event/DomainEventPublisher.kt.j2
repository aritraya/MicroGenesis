package {{ base_package }}.domain.event

import org.springframework.context.ApplicationEventPublisher
import org.springframework.stereotype.Component

/**
 * Publisher for domain events.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
@Component
class DomainEventPublisher(private val applicationEventPublisher: ApplicationEventPublisher) {
    
    /**
     * Publishes a domain event.
     * 
     * @param event the event to publish
     */
    fun publish(event: DomainEvent) {
        applicationEventPublisher.publishEvent(event)
    }
    
    companion object {
        /**
         * Static publisher for use in non-Spring contexts.
         */
        private lateinit var instance: DomainEventPublisher
        
        /**
         * Sets the static instance.
         * 
         * @param publisher the publisher instance
         */
        fun setInstance(publisher: DomainEventPublisher) {
            instance = publisher
        }
        
        /**
         * Publishes a domain event using the static instance.
         * 
         * @param event the event to publish
         */
        fun publish(event: DomainEvent) {
            if (::instance.isInitialized) {
                instance.publish(event)
            } else {
                // Log that no publisher is available
            }
        }
    }
}
