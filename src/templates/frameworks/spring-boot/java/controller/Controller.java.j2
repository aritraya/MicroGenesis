package {{ base_package }}.controller;

import {{ base_package }}.entity.SampleEntity;
import {{ base_package }}.service.SampleEntityService;
{% if dto_pattern is defined and dto_pattern %}
import {{ base_package }}.dto.SampleEntityDto;
import {{ base_package }}.mapper.SampleEntityMapper;
{% endif %}
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;
{% if dto_pattern is defined and dto_pattern %}
import java.util.stream.Collectors;
{% endif %}

/**
 * REST controller for SampleEntity operations.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
@RestController
@RequestMapping("/api/sample-entities")
public class SampleEntityController {

    private final SampleEntityService service;
    
    {% if dto_pattern is defined and dto_pattern %}
    private final SampleEntityMapper mapper;
    
    public SampleEntityController(SampleEntityService service, SampleEntityMapper mapper) {
        this.service = service;
        this.mapper = mapper;
    }
    {% else %}
    public SampleEntityController(SampleEntityService service) {
        this.service = service;
    }
    {% endif %}

    /**
     * Get all sample entities.
     *
     * @return list of all entities
     */
    @GetMapping
    {% if dto_pattern is defined and dto_pattern %}
    public ResponseEntity<List<SampleEntityDto>> findAll() {
        List<SampleEntity> entities = service.findAll();
        List<SampleEntityDto> dtos = entities.stream()
                .map(mapper::toDto)
                .collect(Collectors.toList());
        return ResponseEntity.ok(dtos);
    }
    {% else %}
    public ResponseEntity<List<SampleEntity>> findAll() {
        return ResponseEntity.ok(service.findAll());
    }
    {% endif %}

    /**
     * Get a sample entity by ID.
     *
     * @param id entity ID
     * @return the entity if found, or 404 Not Found
     */
    @GetMapping("/{id}")
    {% if dto_pattern is defined and dto_pattern %}
    public ResponseEntity<SampleEntityDto> findById(@PathVariable UUID id) {
        return service.findById(id)
                .map(mapper::toDto)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    {% else %}
    public ResponseEntity<SampleEntity> findById(@PathVariable UUID id) {
        return service.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    {% endif %}

    /**
     * Create a new sample entity.
     *
     * @param entityData entity data to create
     * @return the created entity
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    {% if dto_pattern is defined and dto_pattern %}
    public ResponseEntity<SampleEntityDto> create(@RequestBody SampleEntityDto entityData) {
        SampleEntity entity = mapper.toEntity(entityData);
        SampleEntity createdEntity = service.create(entity);
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(mapper.toDto(createdEntity));
    }
    {% else %}
    public ResponseEntity<SampleEntity> create(@RequestBody SampleEntity entity) {
        SampleEntity createdEntity = service.create(entity);
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(createdEntity);
    }
    {% endif %}

    /**
     * Update an existing sample entity.
     *
     * @param id entity ID
     * @param entityData updated entity data
     * @return the updated entity if found, or 404 Not Found
     */
    @PutMapping("/{id}")
    {% if dto_pattern is defined and dto_pattern %}
    public ResponseEntity<SampleEntityDto> update(@PathVariable UUID id, @RequestBody SampleEntityDto entityData) {
        SampleEntity entity = mapper.toEntity(entityData);
        return service.update(id, entity)
                .map(mapper::toDto)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    {% else %}
    public ResponseEntity<SampleEntity> update(@PathVariable UUID id, @RequestBody SampleEntity entity) {
        return service.update(id, entity)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    {% endif %}

    /**
     * Delete a sample entity.
     *
     * @param id entity ID
     * @return 204 No Content if deleted, or 404 Not Found
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable UUID id) {
        boolean deleted = service.deleteById(id);
        
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
