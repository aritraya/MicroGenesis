package {{ base_package }}.dto;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.Map;
{% if validation is defined and validation %}
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Email;
{% endif %}
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Data Transfer Object for {{ dto.name | default("Entity") }}.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class {{ dto.name | default("EntityDto") }} {
    
    {% for field in dto.fields | default([]) %}
    {% if validation is defined and validation %}
    {% if field.required %}
    @NotNull(message = "{{ field.name | capitalize }} is required")
    {% endif %}
    {% if field.type == 'String' and field.maxLength is defined %}
    @Size(max = {{ field.maxLength }}, message = "{{ field.name | capitalize }} must be less than {{ field.maxLength }} characters")
    {% endif %}
    {% if field.type == 'String' and field.minLength is defined %}
    @Size(min = {{ field.minLength }}, message = "{{ field.name | capitalize }} must be at least {{ field.minLength }} characters")
    {% endif %}
    {% if field.pattern is defined %}
    @Pattern(regexp = "{{ field.pattern }}", message = "{{ field.name | capitalize }} must match the required pattern")
    {% endif %}
    {% if field.type == 'String' and field.format == 'email' %}
    @Email(message = "{{ field.name | capitalize }} must be a valid email address")
    {% endif %}
    {% if field.type in ['Integer', 'Long', 'Double'] and field.minimum is defined %}
    @Min(value = {{ field.minimum }}, message = "{{ field.name | capitalize }} must be at least {{ field.minimum }}")
    {% endif %}
    {% if field.type in ['Integer', 'Long', 'Double'] and field.maximum is defined %}
    @Max(value = {{ field.maximum }}, message = "{{ field.name | capitalize }} must be at most {{ field.maximum }}")
    {% endif %}
    {% endif %}
    {% if field.jsonProperty is defined %}
    @JsonProperty("{{ field.jsonProperty }}")
    {% endif %}
    private {{ field.type }} {{ field.name }};
    {% endfor %}
    
    {% if dto.fields is not defined or dto.fields|length == 0 %}
    private Long id;
    
    private String name;
    
    private String description;
    
    private LocalDateTime createdAt;
    
    private LocalDateTime updatedAt;
    {% endif %}
    
    public {{ dto.name | default("EntityDto") }}() {
    }
    
    // Constructor with all fields
    public {{ dto.name | default("EntityDto") }}({% for field in dto.fields | default([]) %}{{ field.type }} {{ field.name }}{% if not loop.last %}, {% endif %}{% endfor %}{% if dto.fields is not defined or dto.fields|length == 0 %}Long id, String name, String description, LocalDateTime createdAt, LocalDateTime updatedAt{% endif %}) {
        {% for field in dto.fields | default([]) %}
        this.{{ field.name }} = {{ field.name }};
        {% endfor %}
        {% if dto.fields is not defined or dto.fields|length == 0 %}
        this.id = id;
        this.name = name;
        this.description = description;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        {% endif %}
    }
    
    // Getters and Setters
    {% for field in dto.fields | default([]) %}
    public {{ field.type }} get{{ field.name | capitalize }}() {
        return {{ field.name }};
    }
    
    public void set{{ field.name | capitalize }}({{ field.type }} {{ field.name }}) {
        this.{{ field.name }} = {{ field.name }};
    }
    
    {% endfor %}
    {% if dto.fields is not defined or dto.fields|length == 0 %}
    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
    
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
    {% endif %}
}
