package {{ base_package }}.domain.valueobject;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;

/**
 * Value object representing {{ value_object_name|default('Money') }}.
 * <p>
 * Value objects are immutable and represent concepts with no identity in the domain.
 * They are identified by their attributes rather than an identity field.
 * </p>
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * Architecture: Domain-Driven Design
 * </p>
 */
@Getter
@EqualsAndHashCode
@ToString
public final class {{ value_object_name|default('Money') }} {

    private final {{ value_type|default('BigDecimal') }} amount;
    private final String currencyCode;
    
    /**
     * Creates a new {{ value_object_name|default('Money') }} object.
     *
     * @param amount The amount
     * @param currencyCode The ISO currency code (e.g., USD, EUR)
     */
    public {{ value_object_name|default('Money') }}({{ value_type|default('BigDecimal') }} amount, String currencyCode) {
        if (amount == null) {
            throw new IllegalArgumentException("Amount cannot be null");
        }
        if (currencyCode == null || currencyCode.trim().length() != 3) {
            throw new IllegalArgumentException("Currency code must be a valid 3-letter ISO currency code");
        }
        
        this.amount = amount;
        this.currencyCode = currencyCode.toUpperCase();
    }
    
    /**
     * Creates a new {{ value_object_name|default('Money') }} object with the same currency.
     *
     * @param amount The new amount
     * @return A new {{ value_object_name|default('Money') }} object with the specified amount and same currency
     */
    public {{ value_object_name|default('Money') }} withAmount({{ value_type|default('BigDecimal') }} amount) {
        return new {{ value_object_name|default('Money') }}(amount, this.currencyCode);
    }
    
    /**
     * Adds another {{ value_object_name|default('Money') }} object to this one.
     *
     * @param other The other {{ value_object_name|default('Money') }} object to add
     * @return A new {{ value_object_name|default('Money') }} object with the sum
     * @throws IllegalArgumentException if the currencies don't match
     */
    public {{ value_object_name|default('Money') }} add({{ value_object_name|default('Money') }} other) {
        if (!this.currencyCode.equals(other.currencyCode)) {
            throw new IllegalArgumentException("Cannot add different currencies");
        }
        
        return new {{ value_object_name|default('Money') }}(this.amount.add(other.amount), this.currencyCode);
    }
    
    /**
     * Factory method to create a {{ value_object_name|default('Money') }} object with USD currency.
     *
     * @param amount The amount
     * @return A new {{ value_object_name|default('Money') }} object with USD currency
     */
    public static {{ value_object_name|default('Money') }} ofUSD({{ value_type|default('BigDecimal') }} amount) {
        return new {{ value_object_name|default('Money') }}(amount, "USD");
    }
}
