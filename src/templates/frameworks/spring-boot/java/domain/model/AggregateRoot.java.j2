package {{ base_package }}.domain.model;

import {{ base_package }}.domain.event.DomainEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Base class for aggregate roots in domain-driven design.
 * <p>
 * An aggregate root is an entity that encapsulates and controls access to a cluster
 * of related objects (the aggregate). External objects may only reference the aggregate root.
 * </p>
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
public abstract class AggregateRoot<ID> {
    
    private final List<DomainEvent> domainEvents = new ArrayList<>();
    
    /**
     * Gets the ID of this aggregate root.
     * 
     * @return the ID
     */
    public abstract ID getId();
    
    /**
     * Registers a domain event to be dispatched when the aggregate is saved.
     * 
     * @param event the domain event
     */
    protected void registerEvent(DomainEvent event) {
        domainEvents.add(event);
    }
    
    /**
     * Gets all domain events registered by this aggregate.
     * 
     * @return unmodifiable list of domain events
     */
    public List<DomainEvent> getDomainEvents() {
        return Collections.unmodifiableList(domainEvents);
    }
    
    /**
     * Clears all registered domain events.
     */
    public void clearDomainEvents() {
        domainEvents.clear();
    }
}
