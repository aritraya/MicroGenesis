package {{ base_package }}.domain.model;

import java.time.Instant;
import java.util.UUID;
{% if database.name == 'mongodb' %}
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
{% else %}
import javax.persistence.*;
{% endif %}
import lombok.*;

/**
 * {{ entity_name }} entity - Domain model for {{ entity_description|default('a core business concept') }}.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * Architecture: Domain-Driven Design
 * </p>
 */
{% if database.name == 'mongodb' %}
@Document(collection = "{{ entity_table_name|default(entity_name|lower + 's') }}")
{% else %}
@Entity
@Table(name = "{{ entity_table_name|default(entity_name|lower + 's') }}")
{% endif %}
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class {{ entity_name }} {

    {% if database.name == 'mongodb' %}
    @Id
    private String id;
    {% else %}
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    {% endif %}
    
    {% if has_aggregates is defined and has_aggregates %}
    @Column(name = "aggregate_id", nullable = false)
    private UUID aggregateId;
    {% endif %}
    
    @Column(name = "name", nullable = false)
    private String name;
    
    @Column(name = "description")
    private String description;
    
    @Column(name = "created_at", nullable = false, updatable = false)
    private Instant createdAt;
    
    @Column(name = "updated_at")
    private Instant updatedAt;
    
    @Column(name = "active")
    private boolean active;
    
    {% if has_domain_events is defined and has_domain_events %}
    /**
     * Creates a domain event when this entity changes significantly.
     */
    public {{ entity_name }}ChangedEvent createChangedEvent() {
        return new {{ entity_name }}ChangedEvent(this);
    }
    {% endif %}
}
