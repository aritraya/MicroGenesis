package {{ base_package }}.domain.event;

import java.time.Instant;
import java.util.UUID;
import lombok.Getter;

/**
 * Domain event for {{ entity_name }} changes.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * Architecture: Domain-Driven Design
 * </p>
 */
@Getter
public class {{ entity_name }}ChangedEvent {

    private final UUID eventId;
    private final Instant timestamp;
    private final String entityType;
    private final Long entityId;
    private final String eventType;
    
    /**
     * Creates a new domain event for an entity change.
     * 
     * @param entity The entity that changed
     */
    public {{ entity_name }}ChangedEvent({{ base_package }}.domain.model.{{ entity_name }} entity) {
        this.eventId = UUID.randomUUID();
        this.timestamp = Instant.now();
        this.entityType = "{{ entity_name }}";
        this.entityId = entity.getId();
        this.eventType = "UPDATED";
    }
    
    /**
     * Creates a new domain event for an entity creation.
     * 
     * @param entity The entity that was created
     * @return The domain event
     */
    public static {{ entity_name }}ChangedEvent createdEvent({{ base_package }}.domain.model.{{ entity_name }} entity) {
        {{ entity_name }}ChangedEvent event = new {{ entity_name }}ChangedEvent(entity);
        return new {{ entity_name }}ChangedEvent(event.entityId, event.timestamp, event.entityType, event.entityId, "CREATED");
    }
    
    /**
     * Creates a new domain event for an entity deletion.
     * 
     * @param entityId The ID of the entity that was deleted
     * @return The domain event
     */
    public static {{ entity_name }}ChangedEvent deletedEvent(Long entityId) {
        return new {{ entity_name }}ChangedEvent(UUID.randomUUID(), Instant.now(), "{{ entity_name }}", entityId, "DELETED");
    }
    
    /**
     * Private constructor for creating custom events.
     */
    private {{ entity_name }}ChangedEvent(UUID eventId, Instant timestamp, String entityType, Long entityId, String eventType) {
        this.eventId = eventId;
        this.timestamp = timestamp;
        this.entityType = entityType;
        this.entityId = entityId;
        this.eventType = eventType;
    }
}
