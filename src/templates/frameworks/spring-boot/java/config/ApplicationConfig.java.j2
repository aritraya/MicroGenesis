package {{ base_package }}.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
{% if database == 'mongodb' %}
import org.springframework.data.mongodb.config.EnableMongoAuditing;
{% elif database == 'jpa' %}
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
{% endif %}
{% if has_cors is defined and has_cors %}
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import java.util.Arrays;
{% endif %}

/**
 * Application configuration class.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
@Configuration
{% if database == 'mongodb' %}
@EnableMongoAuditing
{% elif database == 'jpa' %}
@EnableJpaAuditing
{% endif %}
public class ApplicationConfig {

    {% if has_cors is defined and has_cors %}
    /**
     * Configures CORS for the application.
     * 
     * @return the CORS filter
     */
    @Bean
    public CorsFilter corsFilter() {
        CorsConfiguration corsConfiguration = new CorsConfiguration();
        corsConfiguration.setAllowCredentials(true);
        corsConfiguration.setAllowedOrigins(Arrays.asList("http://localhost:8080", "http://localhost:3000"));
        corsConfiguration.setAllowedHeaders(Arrays.asList("Origin", "Access-Control-Allow-Origin", "Content-Type",
                "Accept", "Authorization", "Origin, Accept", "X-Requested-With",
                "Access-Control-Request-Method", "Access-Control-Request-Headers"));
        corsConfiguration.setExposedHeaders(Arrays.asList("Origin", "Content-Type", "Accept", "Authorization",
                "Access-Control-Allow-Origin", "Access-Control-Allow-Credentials"));
        corsConfiguration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        
        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();
        urlBasedCorsConfigurationSource.registerCorsConfiguration("/**", corsConfiguration);
        
        return new CorsFilter(urlBasedCorsConfigurationSource);
    }
    {% endif %}
}
