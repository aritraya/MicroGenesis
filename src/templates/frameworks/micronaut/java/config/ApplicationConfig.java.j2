package {{ base_package }}.config;

import io.micronaut.context.annotation.Factory;
import jakarta.inject.Singleton;
{% if logging_enabled is defined and logging_enabled %}
import io.micronaut.context.annotation.Bean;
import io.micronaut.context.annotation.Value;
import io.micronaut.http.HttpRequest;
import io.micronaut.http.MutableHttpResponse;
import io.micronaut.http.annotation.Filter;
import io.micronaut.http.filter.HttpServerFilter;
import io.micronaut.http.filter.ServerFilterChain;
import org.reactivestreams.Publisher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;
{% endif %}

/**
 * Application configuration class.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
@Factory
public class ApplicationConfig {

    {% if has_custom_bean is defined and has_custom_bean %}
    /**
     * Create a custom bean.
     * 
     * @return the custom bean
     */
    @Singleton
    public CustomBean customBean() {
        return new CustomBean();
    }
    {% endif %}
    
    {% if logging_enabled is defined and logging_enabled %}
    /**
     * HTTP logging filter for request/response logging.
     */
    @Filter("/**")
    @Singleton
    public static class LoggingFilter implements HttpServerFilter {
        
        private static final Logger LOG = LoggerFactory.getLogger(LoggingFilter.class);
        
        @Value("${logging.http.enabled:true}")
        private boolean loggingEnabled;
        
        @Override
        public Publisher<MutableHttpResponse<?>> doFilter(HttpRequest<?> request, ServerFilterChain chain) {
            if (loggingEnabled) {
                LOG.info("Request: {} {}", request.getMethod(), request.getUri());
            }
            
            return Mono.from(chain.proceed(request))
                    .doOnNext(response -> {
                        if (loggingEnabled) {
                            LOG.info("Response: {}", response.getStatus());
                        }
                    });
        }
    }
    {% endif %}
}
