package {{ base_package }}.service;

import {{ base_package }}.entity.SampleEntity;
import {{ base_package }}.repository.SampleEntityRepository;
{% if has_domain_events is defined and has_domain_events %}
import {{ base_package }}.domain.event.DomainEvent;
import {{ base_package }}.domain.event.DomainEventPublisher;
import {{ base_package }}.domain.event.SampleEntityCreatedEvent;
import {{ base_package }}.domain.event.SampleEntityUpdatedEvent;
{% endif %}
import jakarta.inject.Singleton;
import io.micronaut.transaction.annotation.ReadOnly;
import io.micronaut.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Service for managing SampleEntity instances.
 * <p>
 * Generated by MicroGenesis scaffolding tool.
 * </p>
 */
@Singleton
public class SampleEntityService {
    
    private final SampleEntityRepository repository;
    
    public SampleEntityService(SampleEntityRepository repository) {
        this.repository = repository;
    }
    
    /**
     * Find all sample entities.
     * 
     * @return list of all entities
     */
    @ReadOnly
    public List<SampleEntity> findAll() {
        return repository.findAll();
    }
    
    /**
     * Find a sample entity by ID.
     * 
     * @param id entity ID
     * @return optional containing the entity if found
     */
    @ReadOnly
    public Optional<SampleEntity> findById(UUID id) {
        return repository.findById(id);
    }
    
    /**
     * Find sample entities by name (exact match).
     * 
     * @param name name to search for
     * @return list of matching entities
     */
    @ReadOnly
    public List<SampleEntity> findByName(String name) {
        return repository.findByName(name);
    }
    
    /**
     * Search for sample entities by partial name (case-insensitive).
     * 
     * @param namePart part of name to search for
     * @return list of matching entities
     */
    @ReadOnly
    public List<SampleEntity> searchByName(String namePart) {
        return repository.findByNameContainsIgnoreCase(namePart);
    }
    
    /**
     * Create a new sample entity.
     * 
     * @param name entity name
     * @param description entity description
     * @return created entity
     */
    @Transactional
    public SampleEntity create(String name, String description) {
        SampleEntity entity = new SampleEntity();
        entity.setName(name);
        entity.setDescription(description);
        
        LocalDateTime now = LocalDateTime.now();
        entity.setCreatedAt(now);
        entity.setUpdatedAt(now);
        
        SampleEntity savedEntity = repository.save(entity);
        
        {% if has_domain_events is defined and has_domain_events %}
        // Publish domain event
        DomainEventPublisher.publish(new SampleEntityCreatedEvent(savedEntity.getId(), savedEntity.getName()));
        {% endif %}
        
        return savedEntity;
    }
    
    /**
     * Update an existing sample entity.
     * 
     * @param id entity ID
     * @param name updated name
     * @param description updated description
     * @return updated entity if found, empty optional otherwise
     */
    @Transactional
    public Optional<SampleEntity> update(UUID id, String name, String description) {
        return repository.findById(id)
                .map(entity -> {
                    entity.setName(name);
                    entity.setDescription(description);
                    entity.setUpdatedAt(LocalDateTime.now());
                    
                    SampleEntity updatedEntity = repository.update(entity);
                    
                    {% if has_domain_events is defined and has_domain_events %}
                    // Publish domain event
                    DomainEventPublisher.publish(new SampleEntityUpdatedEvent(updatedEntity.getId(), updatedEntity.getName()));
                    {% endif %}
                    
                    return updatedEntity;
                });
    }
    
    /**
     * Delete a sample entity by ID.
     * 
     * @param id entity ID
     * @return true if entity was deleted, false if not found
     */
    @Transactional
    public boolean delete(UUID id) {
        return repository.findById(id)
                .map(entity -> {
                    repository.delete(entity);
                    return true;
                })
                .orElse(false);
    }
}
