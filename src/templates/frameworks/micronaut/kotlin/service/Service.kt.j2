package {{ base_package }}.service

import {{ base_package }}.entity.SampleEntity
import {{ base_package }}.repository.SampleEntityRepository
{% if has_domain_events is defined and has_domain_events %}
import {{ base_package }}.domain.event.DomainEvent
import {{ base_package }}.domain.event.DomainEventPublisher
import {{ base_package }}.domain.event.SampleEntityCreatedEvent
import {{ base_package }}.domain.event.SampleEntityUpdatedEvent
{% endif %}
import jakarta.inject.Singleton
import io.micronaut.transaction.annotation.ReadOnly
import io.micronaut.transaction.annotation.Transactional
import java.time.LocalDateTime
import java.util.Optional
import java.util.UUID

/**
 * Service for managing SampleEntity instances.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
@Singleton
class SampleEntityService(private val repository: SampleEntityRepository) {
    
    /**
     * Find all sample entities.
     * 
     * @return list of all entities
     */
    @ReadOnly
    fun findAll(): List<SampleEntity> {
        return repository.findAll()
    }
    
    /**
     * Find a sample entity by ID.
     * 
     * @param id entity ID
     * @return optional containing the entity if found
     */
    @ReadOnly
    fun findById(id: UUID): Optional<SampleEntity> {
        return repository.findById(id)
    }
    
    /**
     * Find sample entities by name (exact match).
     * 
     * @param name name to search for
     * @return list of matching entities
     */
    @ReadOnly
    fun findByName(name: String): List<SampleEntity> {
        return repository.findByName(name)
    }
    
    /**
     * Create a new sample entity.
     * 
     * @param entity entity to create
     * @return created entity
     */
    @Transactional
    fun create(entity: SampleEntity): SampleEntity {
        entity.createdAt = LocalDateTime.now()
        entity.updatedAt = LocalDateTime.now()
        val savedEntity = repository.save(entity)
        
        {% if has_domain_events is defined and has_domain_events %}
        // Publish domain event
        DomainEventPublisher.publish(SampleEntityCreatedEvent(savedEntity))
        {% endif %}
        
        return savedEntity
    }
    
    /**
     * Update an existing sample entity.
     * 
     * @param id entity ID
     * @param entity updated entity data
     * @return updated entity, or empty optional if not found
     */
    @Transactional
    fun update(id: UUID, entity: SampleEntity): Optional<SampleEntity> {
        return repository.findById(id).map { existingEntity ->
            existingEntity.name = entity.name
            existingEntity.description = entity.description
            existingEntity.updatedAt = LocalDateTime.now()
            
            val updatedEntity = repository.update(existingEntity)
            
            {% if has_domain_events is defined and has_domain_events %}
            // Publish domain event
            DomainEventPublisher.publish(SampleEntityUpdatedEvent(updatedEntity))
            {% endif %}
            
            updatedEntity
        }
    }
    
    /**
     * Delete a sample entity by ID.
     * 
     * @param id entity ID
     * @return true if deleted, false if not found
     */
    @Transactional
    fun deleteById(id: UUID): Boolean {
        return repository.findById(id).map { entity ->
            repository.delete(entity)
            true
        }.orElse(false)
    }
}
