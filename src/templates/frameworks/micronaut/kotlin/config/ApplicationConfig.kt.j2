package {{ base_package }}.config

import io.micronaut.context.annotation.Factory
import jakarta.inject.Singleton
{% if logging_enabled is defined and logging_enabled %}
import io.micronaut.context.annotation.Bean
import io.micronaut.context.annotation.Value
import io.micronaut.http.HttpRequest
import io.micronaut.http.MutableHttpResponse
import io.micronaut.http.annotation.Filter
import io.micronaut.http.filter.HttpServerFilter
import io.micronaut.http.filter.ServerFilterChain
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import reactor.core.publisher.Mono
{% endif %}

/**
 * Application configuration class.
 *
 * Generated by MicroGenesis scaffolding tool.
 */
@Factory
class ApplicationConfig {

    {% if has_custom_bean is defined and has_custom_bean %}
    /**
     * Create a custom bean.
     * 
     * @return the custom bean
     */
    @Singleton
    fun customBean(): CustomBean {
        return CustomBean()
    }
    {% endif %}
    
    {% if logging_enabled is defined and logging_enabled %}
    /**
     * HTTP logging filter for request/response logging.
     */
    @Filter("/**")
    @Singleton
    class LoggingFilter : HttpServerFilter {
        
        companion object {
            private val LOG = LoggerFactory.getLogger(LoggingFilter::class.java)
        }
        
        @Value("\${logging.http.enabled:true}")
        private var loggingEnabled: Boolean = true
        
        override fun doFilter(request: HttpRequest<*>, chain: ServerFilterChain): Publisher<MutableHttpResponse<*>> {
            if (loggingEnabled) {
                LOG.info("Request: {} {}", request.method, request.uri)
            }
            
            return Mono.from(chain.proceed(request))
                .doOnNext { response ->
                    if (loggingEnabled) {
                        LOG.info("Response: {}", response.status)
                    }
                }
        }
    }
    {% endif %}
}
