package {{ package }};

import graphql.GraphQL;
import graphql.schema.GraphQLSchema;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import {{ base_package }}.resolvers.QueryResolver;
import {{ base_package }}.resolvers.MutationResolver;

/**
 * GraphQL configuration.
 * Generated by MicroGenesis
 */
@Configuration
public class GraphQLConfig {

    @Autowired
    private QueryResolver queryResolver;
    
    @Autowired
    private MutationResolver mutationResolver;

    @Bean
    public GraphQL graphQL() throws IOException {
        // Load and parse the schema
        Resource resource = new ClassPathResource("graphql/schema.graphqls");
        InputStream inputStream = resource.getInputStream();
        Reader reader = new InputStreamReader(inputStream);
        
        // Parse the schema
        TypeDefinitionRegistry typeDefinitionRegistry = new SchemaParser().parse(reader);
        
        // Create the runtime wiring
        RuntimeWiring runtimeWiring = buildRuntimeWiring();
        
        // Generate the schema
        SchemaGenerator schemaGenerator = new SchemaGenerator();
        GraphQLSchema graphQLSchema = schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);
        
        // Build and return the GraphQL instance
        return GraphQL.newGraphQL(graphQLSchema).build();
    }
    
    private RuntimeWiring buildRuntimeWiring() {
        return RuntimeWiring.newRuntimeWiring()
                .type("Query", typeWiring -> typeWiring
                        .dataFetchers(queryResolver.getQueryResolvers()))
                .type("Mutation", typeWiring -> typeWiring
                        .dataFetchers(mutationResolver.getMutationResolvers()))
                .build();
    }
}
