package {{ base_package }}.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import {{ base_package }}.model.{{ entityName }};
import {{ base_package }}.repository.{{ entityName }}Repository;
import {{ base_package }}.dto.{{ entityName }}DTO;
import {{ base_package }}.mapper.{{ entityName }}Mapper;
import {{ base_package }}.service.impl.{{ entityName }}ServiceImpl;
import javax.persistence.EntityNotFoundException;

/**
 * Service tests for {{ entityName }}Service.
 */
@SpringBootTest
@ActiveProfiles("test")
public class {{ entityName }}ServiceTest {

    @Autowired
    private {{ entityName }}Service service;
    
    @MockBean
    private {{ entityName }}Repository repository;
    
    @Autowired
    private {{ entityName }}Mapper mapper;
    
    private {{ entityName }} test{{ entityName }};
    private {{ entityName }}DTO test{{ entityName }}DTO;
    
    @BeforeEach
    public void setup() {
        test{{ entityName }} = new {{ entityName }}();
        test{{ entityName }}.setId(1L);
        test{{ entityName }}.setName("Test {{ entityName }}");
        test{{ entityName }}.setDescription("Test Description");
        
        test{{ entityName }}DTO = mapper.toDTO(test{{ entityName }});
        
        when(repository.findById(1L)).thenReturn(Optional.of(test{{ entityName }}));
        when(repository.findAll()).thenReturn(Arrays.asList(test{{ entityName }}));
        when(repository.save(any({{ entityName }}.class))).thenReturn(test{{ entityName }});
    }
    
    @Test
    public void testFindById() {
        {{ entityName }}DTO found = service.findById(1L);
        
        assertThat(found).isNotNull();
        assertThat(found.getName()).isEqualTo("Test {{ entityName }}");
        verify(repository, times(1)).findById(1L);
    }
    
    @Test
    public void testFindAll() {
        List<{{ entityName }}DTO> result = service.findAll();
        
        assertThat(result).isNotNull();
        assertThat(result).hasSize(1);
        assertThat(result.get(0).getName()).isEqualTo("Test {{ entityName }}");
        verify(repository, times(1)).findAll();
    }
    
    @Test
    public void testCreate() {
        {{ entityName }}DTO newDTO = new {{ entityName }}DTO();
        newDTO.setName("New {{ entityName }}");
        newDTO.setDescription("New Description");
        
        {{ entityName }}DTO created = service.create(newDTO);
        
        assertThat(created).isNotNull();
        assertThat(created.getName()).isEqualTo("Test {{ entityName }}"); // Using our mock response
        verify(repository, times(1)).save(any({{ entityName }}.class));
    }
    
    @Test
    public void testUpdate() {
        when(repository.existsById(1L)).thenReturn(true);
        
        {{ entityName }}DTO updateDTO = new {{ entityName }}DTO();
        updateDTO.setName("Updated {{ entityName }}");
        updateDTO.setDescription("Updated Description");
        
        {{ entityName }}DTO updated = service.update(1L, updateDTO);
        
        assertThat(updated).isNotNull();
        assertThat(updated.getName()).isEqualTo("Test {{ entityName }}"); // Using our mock response
        verify(repository, times(1)).existsById(1L);
        verify(repository, times(1)).save(any({{ entityName }}.class));
    }
    
    @Test
    public void testDelete() {
        when(repository.existsById(1L)).thenReturn(true);
        
        service.delete(1L);
        
        verify(repository, times(1)).existsById(1L);
        verify(repository, times(1)).deleteById(1L);
    }
    
    {% if service_type == "domain-driven" %}
    // Additional domain-driven design tests
    @Test
    public void testDomainSpecificBehavior() {
        // Domain logic specific tests
    }
    {% elif service_type == "technical-layered" %}
    // Additional technical/layered tests
    @Test
    public void testLayerInteractions() {
        // Test interactions between layers
    }
    {% elif service_type == "data-driven" %}
    // Additional data-driven tests
    @Test
    public void testDataTransformations() {
        // Test data transformations
    }
    {% elif service_type == "function-oriented" %}
    // Additional function-oriented tests
    @Test
    public void testBusinessFunctions() {
        // Test specific business functions
    }
    {% endif %}
}
