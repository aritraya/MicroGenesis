package {{ base_package }}.service.impl;

import {{ base_package }}.dto.SampleDTO;
import {{ base_package }}.model.SampleEntity;
import {{ base_package }}.repository.SampleRepository;
import {{ base_package }}.service.SampleService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Implementation of the SampleService interface
 */
@Service
@RequiredArgsConstructor
public class SampleServiceImpl implements SampleService {

    private final SampleRepository sampleRepository;

    @Override
    @Transactional(readOnly = true)
    public List<SampleDTO> findAll() {
        return sampleRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public SampleDTO findById(Long id) {
        return sampleRepository.findById(id)
                .map(this::convertToDTO)
                .orElseThrow(() -> new EntityNotFoundException("Sample not found with id: " + id));
    }

    @Override
    @Transactional
    public SampleDTO save(SampleDTO sampleDTO) {
        SampleEntity entity = convertToEntity(sampleDTO);
        entity.setCreatedAt(LocalDateTime.now());
        SampleEntity savedEntity = sampleRepository.save(entity);
        return convertToDTO(savedEntity);
    }

    @Override
    @Transactional
    public SampleDTO update(SampleDTO sampleDTO) {
        if (sampleDTO.getId() == null) {
            throw new IllegalArgumentException("ID must be provided for update operation");
        }
        
        // Check if entity exists
        sampleRepository.findById(sampleDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Sample not found with id: " + sampleDTO.getId()));
        
        SampleEntity entity = convertToEntity(sampleDTO);
        SampleEntity savedEntity = sampleRepository.save(entity);
        return convertToDTO(savedEntity);
    }

    @Override
    @Transactional
    public void delete(Long id) {
        if (!sampleRepository.existsById(id)) {
            throw new EntityNotFoundException("Sample not found with id: " + id);
        }
        sampleRepository.deleteById(id);
    }

    /**
     * Convert entity to DTO
     */
    private SampleDTO convertToDTO(SampleEntity entity) {
        return SampleDTO.builder()
                .id(entity.getId())
                .name(entity.getName())
                .description(entity.getDescription())
                .createdAt(entity.getCreatedAt())
                .build();
    }

    /**
     * Convert DTO to entity
     */
    private SampleEntity convertToEntity(SampleDTO dto) {
        return SampleEntity.builder()
                .id(dto.getId())
                .name(dto.getName())
                .description(dto.getDescription())
                .createdAt(dto.getCreatedAt())
                .build();
    }
}
