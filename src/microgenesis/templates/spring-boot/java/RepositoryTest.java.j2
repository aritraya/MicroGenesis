package {{ base_package }}.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ActiveProfiles;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.assertj.core.api.Assertions.assertThat;

import {{ base_package }}.model.{{ entityName }};

/**
 * Repository tests for {{ entityName }}.
 */
@DataJpaTest
@ActiveProfiles("test")
public class {{ entityName }}RepositoryTest {

    @Autowired
    private {{ entityName }}Repository repository;
    
    private {{ entityName }} test{{ entityName }};
    
    @BeforeEach
    public void setup() {
        test{{ entityName }} = new {{ entityName }}();
        test{{ entityName }}.setName("Test {{ entityName }}");
        test{{ entityName }}.setDescription("Test Description");
        
        test{{ entityName }} = repository.save(test{{ entityName }});
    }
    
    @Test
    public void testFindById() {
        {{ entityName }} found = repository.findById(test{{ entityName }}.getId()).orElse(null);
        assertThat(found).isNotNull();
        assertThat(found.getName()).isEqualTo("Test {{ entityName }}");
    }
    
    @Test
    public void testFindByName() {
        {{ entityName }} found = repository.findByName("Test {{ entityName }}");
        assertThat(found).isNotNull();
        assertThat(found.getId()).isEqualTo(test{{ entityName }}.getId());
    }
    
    @Test
    public void testUpdateEntity() {
        test{{ entityName }}.setName("Updated Name");
        {{ entityName }} updated = repository.save(test{{ entityName }});
        
        assertThat(updated.getName()).isEqualTo("Updated Name");
        
        {{ entityName }} found = repository.findById(test{{ entityName }}.getId()).orElse(null);
        assertThat(found).isNotNull();
        assertThat(found.getName()).isEqualTo("Updated Name");
    }
    
    @Test
    public void testDeleteEntity() {
        repository.delete(test{{ entityName }});
        
        {{ entityName }} found = repository.findById(test{{ entityName }}.getId()).orElse(null);
        assertThat(found).isNull();
    }
}
