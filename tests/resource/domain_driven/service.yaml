openapi: 3.0.3
info:
  title: Domain-Driven E-Commerce API
  description: |
    A Domain-Driven Design approach to an e-commerce system API, organized around business domains and their bounded contexts.
    This API demonstrates DDD concepts like aggregates, entities, value objects, and domain services.
  version: 1.0.0
  contact:
    name: MicroGenesis Team
    url: https://github.com/microgenesis/microgenesis
tags:
  - name: Product Catalog
    description: Product catalog domain operations
  - name: Shopping Cart
    description: Shopping cart domain operations
  - name: Order
    description: Order domain operations
  - name: Customer
    description: Customer domain operations
  - name: Shipping
    description: Shipping domain operations
  - name: Payment
    description: Payment domain operations

paths:
  # PRODUCT CATALOG BOUNDED CONTEXT
  /domains/product-catalog/products:
    get:
      summary: List all products
      description: Returns a list of products with pagination
      tags:
        - Product Catalog
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          description: Filter by category ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedProducts'
    post:
      summary: Create a new product
      description: Add a new product to the catalog
      tags:
        - Product Catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreationCommand'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /domains/product-catalog/products/{productId}:
    get:
      summary: Get product by ID
      description: Returns a single product by ID
      tags:
        - Product Catalog
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update product
      description: Update product information
      tags:
        - Product Catalog
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of the product
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateCommand'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

  # SHOPPING CART BOUNDED CONTEXT
  /domains/shopping-cart/customers/{customerId}/cart:
    get:
      summary: Get customer's shopping cart
      description: Returns the current shopping cart for a customer
      tags:
        - Shopping Cart
      parameters:
        - name: customerId
          in: path
          required: true
          description: ID of the customer
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        '404':
          description: Cart not found
    post:
      summary: Add item to cart
      description: Add a product to the customer's shopping cart
      tags:
        - Shopping Cart
      parameters:
        - name: customerId
          in: path
          required: true
          description: ID of the customer
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartCommand'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'

  # ORDER BOUNDED CONTEXT
  /domains/order/orders:
    post:
      summary: Place an order
      description: Convert a cart to an order
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderCommand'
      responses:
        '201':
          description: Order placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /domains/order/orders/{orderId}:
    get:
      summary: Get order details
      description: Returns detailed information about an order
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    patch:
      summary: Update order status
      description: Update the status of an order
      tags:
        - Order
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusCommand'
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

components:
  schemas:
    # PRODUCT CATALOG DOMAIN
    Money:
      type: object
      description: Value object representing monetary value
      properties:
        amount:
          type: number
          format: double
          example: 49.99
        currency:
          type: string
          example: USD

    ProductDetails:
      type: object
      description: Value object containing product details
      properties:
        description:
          type: string
          example: Detailed product description with features.
        specifications:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Weight
              value:
                type: string
                example: 1.5 kg
        images:
          type: array
          items:
            type: string
            format: uri
            example: https://example.com/images/product1.jpg

    Product:
      type: object
      description: Product aggregate root
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          example: Professional Wireless Mouse
        sku:
          type: string
          example: WL-MOUSE-PRO-001
        price:
          $ref: '#/components/schemas/Money'
        stockQuantity:
          type: integer
          example: 150
        category:
          $ref: '#/components/schemas/Category'
        productDetails:
          $ref: '#/components/schemas/ProductDetails'
        status:
          type: string
          enum: [ACTIVE, DISCONTINUED, OUT_OF_STOCK]
          example: ACTIVE
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440001
        name:
          type: string
          example: Computer Accessories
        parentCategory:
          type: string
          format: uuid
          nullable: true
          example: null

    PagedProducts:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8

    # SHOPPING CART DOMAIN
    CartItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        productName:
          type: string
          example: Professional Wireless Mouse
        quantity:
          type: integer
          example: 2
        unitPrice:
          $ref: '#/components/schemas/Money'
        totalPrice:
          $ref: '#/components/schemas/Money'

    ShoppingCart:
      type: object
      description: Shopping cart aggregate root
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440010
        customerId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440020
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        itemCount:
          type: integer
          example: 3
        totalAmount:
          $ref: '#/components/schemas/Money'
        lastUpdated:
          type: string
          format: date-time

    # ORDER DOMAIN
    Address:
      type: object
      description: Value object for addresses
      properties:
        streetLine1:
          type: string
          example: 123 Main St
        streetLine2:
          type: string
          example: Apt 4B
        city:
          type: string
          example: Boston
        state:
          type: string
          example: MA
        postalCode:
          type: string
          example: 02115
        country:
          type: string
          example: USA

    OrderItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        productName:
          type: string
          example: Professional Wireless Mouse
        quantity:
          type: integer
          example: 2
        unitPrice:
          $ref: '#/components/schemas/Money'
        totalPrice:
          $ref: '#/components/schemas/Money'

    Order:
      type: object
      description: Order aggregate root
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440030
        orderNumber:
          type: string
          example: ORD-20230615-00001
        customerId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440020
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum: [PLACED, PAID, SHIPPED, DELIVERED, CANCELLED]
          example: PLACED
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        subtotal:
          $ref: '#/components/schemas/Money'
        shippingCost:
          $ref: '#/components/schemas/Money'
        tax:
          $ref: '#/components/schemas/Money'
        totalAmount:
          $ref: '#/components/schemas/Money'
        paymentMethod:
          type: string
          example: CREDIT_CARD
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # COMMAND OBJECTS
    ProductCreationCommand:
      type: object
      required:
        - name
        - sku
        - price
        - categoryId
      properties:
        name:
          type: string
          example: Professional Wireless Mouse
        sku:
          type: string
          example: WL-MOUSE-PRO-001
        price:
          $ref: '#/components/schemas/Money'
        stockQuantity:
          type: integer
          example: 150
        categoryId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440001
        details:
          $ref: '#/components/schemas/ProductDetails'

    ProductUpdateCommand:
      type: object
      properties:
        name:
          type: string
          example: Professional Wireless Mouse
        price:
          $ref: '#/components/schemas/Money'
        stockQuantity:
          type: integer
          example: 150
        categoryId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440001
        details:
          $ref: '#/components/schemas/ProductDetails'
        status:
          type: string
          enum: [ACTIVE, DISCONTINUED, OUT_OF_STOCK]
          example: ACTIVE

    AddToCartCommand:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        quantity:
          type: integer
          example: 2

    PlaceOrderCommand:
      type: object
      required:
        - customerId
        - shippingAddress
        - billingAddress
        - paymentMethod
      properties:
        customerId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440020
        cartId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440010
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        paymentMethod:
          type: string
          example: CREDIT_CARD

    UpdateOrderStatusCommand:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PLACED, PAID, SHIPPED, DELIVERED, CANCELLED]
          example: PAID
